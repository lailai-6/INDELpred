'''
@author: Yilin Wei
@Date: 2023/10/7
@Project: INDELpred
@Desc: Integrating preprocessing and prediction, starting from the txt file generated by ANNOVAR, to obtain the final INDELpred score.
'''

import argparse
import os

import pandas as pd
import numpy as np
import pickle


# Function to load data from a specified file
def load_data(infile):
    with open(infile, 'rb') as inf:
        data = pickle.load(inf)
    return data


# Function to parse command line arguments
def parse_args():
    parser = argparse.ArgumentParser(description='INDELpred processing and prediction.')
    parser.add_argument('-i', '--input', type=str, required=True, help='Path to the input file.')
    parser.add_argument('-o', '--output', type=str, default=None,
                        help='Path to the output directory. Default is based on input file path.')

    args = parser.parse_args()
    if args.output is None:
        base_name = os.path.basename(args.input)
        args.output = base_name.replace("hg38_multianno.txt", "tsv").replace("hg19_multianno.txt", "tsv")

    return args


# Preprocess: Initial data processing and feature engineering

dict_gene1 = {
    # 'Func.refGene',
    'stream': 5,
    'exonic': 1,
    'intergenic': 6,
    'intronic': 4,
    'ncRNA': 2,
    'splicing': 1,
    'UTR': 3
}

dict_gene2 = {
    '.': 12,
    # 'ExonicFunc.refGene',
    'frameshift deletion': 2,
    'frameshift insertion': 1,
    'nonframeshift deletion': 7,
    'nonframeshift insertion': 6,
    'stopgain': 4,
    'stoploss': 5,
    'startloss': 0,
    'unknown': 11
}

columns_list = ['CHR', 'POS', 'REF', 'ALT', 'Func.refGene', 'Gene.refGene', 'GeneDetail.refGene',
                'ExonicFunc.refGene', 'AAChange.refGene', 'controls_AF_popmax', 'Length',
                'exonic', 'intronic',  'splicing',
                'UTR', 'frameshift deletion', 'frameshift insertion',
                'nonframeshift deletion', 'nonframeshift insertion', 'startloss',
                'stopgain', 'Func_b', 'Func_p', 'ExonicFunc_b', 'ExonicFunc_p']
rename_col = ['CHR', 'POS', 'REF', 'ALT', 'Func.refGene', 'Gene.refGene', 'GeneDetail.refGene',
              'ExonicFunc.refGene', 'AAChange.refGene', 'AF', 'length',
              'exonic', 'intronic', 'splicing',
              'UTR', 'frameshift_deletion', 'frameshift_insertion',
              'nonframeshift_deletion', 'nonframeshift_insertion', 'startloss',
              'stopgain', 'Func_b', 'Func_p', 'ExonicFunc_b', 'ExonicFunc_p']

# Importing Files
args = parse_args()
total = pd.read_table(args.input)
print("ANNOVAR file read successfully")

# Filtering out loci that are not indels
column_mapping = {
    'Otherinfo4': 'CHR',
    'Otherinfo5': 'POS',
    'Otherinfo7': 'REF',
    'Otherinfo8': 'ALT'
}
total = total.rename(columns=column_mapping)
total['Length'] = (total['REF'].str.len() - total['ALT'].str.len()).abs()
total = total.loc[(total['Length'] > 0) & (total['Length'] < 100)] #fixed conditional formatting of & character in pandas
values_to_remove = ['nonframeshift substitution', 'frameshift substitution', 'nonsynonymous SNV', 'synonymous SNV']
total = total[~total['ExonicFunc.refGene'].isin(values_to_remove)]

# Calculating func score
## Merging streams, UTRs, ncRNAs, and exonic
total['Func.refGene'] = total['Func.refGene'].str.replace(r'.*UTR.*', 'UTR', regex=True)
total['Func.refGene'] = total['Func.refGene'].str.replace(r'.*ncRNA.*', 'ncRNA', regex=True)
total['Func.refGene'] = total['Func.refGene'].str.replace(r'.*stream.*', 'stream', regex=True)
total['Func.refGene'] = total['Func.refGene'].str.replace(r'.*exonic.*', 'exonic', regex=True)

## Merging calculated P_ig_pivot_(exonic)Func
P_ig_pivot_Func, P_ig_pivot_exonicFunc, dic_func_b, dic_func_p, dic_exon_func_b, dic_exon_func_p = load_data(
    "model/func_feature.pkl")
total = total.merge(P_ig_pivot_Func, on='Gene.refGene', how='left')
total = total.merge(P_ig_pivot_exonicFunc, on='Gene.refGene', how='left')

## Filling missing values for P_ig_pivot_(exonic)Func
fill_values_Func = P_ig_pivot_Func.fillna(0).mean(numeric_only=True)
fill_values_exonicFunc = P_ig_pivot_exonicFunc.fillna(0).mean(numeric_only=True)
for col in fill_values_Func.index:
    total[col].fillna(fill_values_Func[col], inplace=True)
for col in fill_values_exonicFunc.index:
    total.loc[total['Func.refGene'] != 'exonic', col] = 0
    total.loc[total['Func.refGene'] == 'exonic', col] = fill_values_exonicFunc[col]


# Adding custom tolerance scores
# Function to replace data based on predefined dictionaries
def func_replace(data):
    data['Func_b'] = data['Func.refGene'].replace(dic_func_b)
    data['Func_p'] = data['Func.refGene'].replace(dic_func_p)
    data['Func'] = data['Func.refGene'].replace(dict_gene1)
    data['ExonicFunc_b'] = data['ExonicFunc.refGene'].replace(dic_exon_func_b)
    data['ExonicFunc_p'] = data['ExonicFunc.refGene'].replace(dic_exon_func_p)
    data['ExonicFunc'] = data['ExonicFunc.refGene'].replace(dict_gene2)
    return data


func_replace(total)

# Organizing data format
clinical_data = total.loc[:, columns_list]
clinical_data.columns = rename_col
clinical_data = clinical_data.replace('.', np.nan)

for column in clinical_data.columns[9:]:
    clinical_data[column] = pd.to_numeric(clinical_data[column])
    clinical_data[column].fillna(0, inplace=True)

x = clinical_data.iloc[:, 9:]
print("Data preprocessing completed")
# Predict: Use the pre-trained model to make predictions and save the results

clf = load_data("model/model.pkl")
y_pred_prob = clf.predict_proba(x)[:, 1]
y_pred_prob_df = pd.DataFrame(y_pred_prob, columns=['INDELpred score'])

result = pd.concat([clinical_data, y_pred_prob_df], axis=1)
result.to_csv(args.output, sep='\t', index=None)
print(f"The results have been saved to {args.output}")
